services:
  catcher:
    build:
      context: ./catcher
      dockerfile: ./catcher/Dockerfile.staging
  environment:
    - Test=staging
  depends_on:
    catcher-outgoing-queue:
      condition: service_healthy
  ports:
    - "8080:8080"
  networks:
    - argus
  
  catcher-outgoing-queue:
    image: rabbitmq:3
    environment:
      RABBITMQ_DEFAULT_USER: "rabbit"
      RABBITMQ_DEFAULT_PASS: 
    healthcheck:
        test: "rabbitmq-diagnostics -q ping && rabbitmq-diagnostics -q check_running"
        interval: 5s
        timeout: 15s
        retries: 10
    networks:
      - argus

  deduplicator-stage-one:
    build:
      context: ./deduplicator
      dockerfile: ./deduplicator/Dockerfile.staging
    environment:
      - Test=staging
    depends_on:
      catcher-outgoing-queue:
        condition: service_healthy
      deduplicator-stage-one-outgoing-queue:
        condition: service_healthy
      deduplicator-stage-one-redis-cache:
        condition: service_healthy
    networks:
      - argus
  
  deduplicator-stage-one-outgoing-queue:
    image: rabbitmq:3
    environment:
      RABBITMQ_DEFAULT_USER: "rabbit"
      RABBITMQ_DEFAULT_PASS: 
    healthcheck:
        test: "rabbitmq-diagnostics -q ping && rabbitmq-diagnostics -q check_running"
        interval: 5s
        timeout: 15s
        retries: 10
    networks:
      - argus
  
  deduplicator-stage-one-redis-cache:
    image: redis:6
    healthcheck:
      test: "redis-cli ping"
      interval: 5s
      timeout: 15s
      retries: 10
    networks:
      - argus
  

  deduplicator-stage-two:
    build:
      context: ./deduplicator
      dockerfile: ./deduplicator/Dockerfile.staging
    environment:
      - Test=staging
    depends_on:
      deduplicator-stage-one-outgoing-queue:
        condition: service_healthy
      deduplicator-stage-two-outgoing-queue:
        condition: service_healthy
      deduplicator-stage-two-redis-cache:
        condition: service_healthy
    networks:
      - argus
  
  deduplicator-stage-two-outgoing-queue:
    image: rabbitmq:3
    environment:
      RABBITMQ_DEFAULT_USER: "rabbit"
      RABBITMQ_DEFAULT_PASS: 
    healthcheck:
        test: "rabbitmq-diagnostics -q ping && rabbitmq-diagnostics -q check_running"
        interval: 5s
        timeout: 15s
        retries: 10
    networks:
      - argus
  
  deduplicator-stage-two-redis-cache:
    image: redis:6
    healthcheck:
      test: "redis-cli ping"
      interval: 5s
      timeout: 15s
      retries: 10
    networks:
      - argus
  
  deduplicator-stage-three:
    build:
      context: ./deduplicator
      dockerfile: ./deduplicator/Dockerfile.staging
    environment:
      - Test=staging
    depends_on:
      deduplicator-stage-two-outgoing-queue:
        condition: service_healthy
      #  Opensearch
      deduplicator-stage-three-redis-cache:
        condition: service_healthy
    networks:
      - argus

  deduplicator-stage-three-redis-cache:
    image: redis:6
    healthcheck:
      test: "redis-cli ping"
      interval: 5s
      timeout: 15s
      retries: 10
    networks:
      - argus
    
  opensearch-node1:
    image: opensearchproject/opensearch:latest
    container_name: opensearch-node1
    environment:
      - cluster.name=opensearch-cluster
      - node.name=opensearch-node1
      - discovery.seed_hosts=opensearch-node1,opensearch-node2
      - cluster.initial_cluster_manager_nodes=opensearch-node1,opensearch-node2
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=
      - plugins.security.ssl.http.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - opensearch-data1:/usr/share/opensearch/data
    ports:
      - 9200:9200 # REST API
      - 9600:9600 # Performance Analyzer
    networks:
      - argus

  opensearch-node2:
    image: opensearchproject/opensearch:latest
    container_name: opensearch-node2
    environment:
      - cluster.name=opensearch-cluster
      - node.name=opensearch-node2
      - discovery.seed_hosts=opensearch-node1,opensearch-node2
      - cluster.initial_cluster_manager_nodes=opensearch-node1,opensearch-node2
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=Amagi@123
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - opensearch-data2:/usr/share/opensearch/data
    networks:
      - argus
  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:latest
    container_name: opensearch-dashboards
    ports:
      - 5601:5601 # Dashboards UI
    expose:
      - "5601"
    environment:
      OPENSEARCH_HOSTS: '["https://opensearch-node1:9200","https://opensearch-node2:9200"]'
